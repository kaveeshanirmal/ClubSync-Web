// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  volunteer
  systemAdmin
}

enum MembershipRole {
  member
  president
  secretary
  treasurer
  webmaster
}

enum EventRole {
  organizer
  participant
}

enum MembershipStatus {
  active
  inactive
  pending
  banned
}

enum ClubType {
  academic
  sports
  cultural
  volunteer
  professional
  hobby
  other
}

enum ClubCategory {
  communityBased
  instituteBased
}

enum RequestStatus {
  pending
  underReview
  approved
  rejected
  needsMoreInfo
}

enum InquiryType {
  general
  technicalSupport
  partnership
  feedback
  other
}

enum InquirerRole {
  guest
  volunteer
}

enum EventCategory {
  workshop
  seminar
  competition
  social
  fundraising
  meeting
  conference
  other
}

enum JoinRequestStatus {
  pendingReview
  interviewPending
  approved
  declined
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  password      String    @default("")
  image         String    @default("")
  role          Role      @default(volunteer)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime? @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  eventRegistrations EventRegistration[] @relation("EventRegistrations")
  eventAttendances   EventAttendance[]
  clubRequests       ClubRequest[]       @relation("ClubRequests")
  createdClubs       Club[]              @relation("ClubCreator")
  clubMembers        ClubMember[]
  Club               Club[]
  EventRegistration  EventRegistration[]
  ClubRequest        ClubRequest[]
  VolunteerStats     VolunteerStats?
  JoinRequest        JoinRequest[]
  certificates       Certificate[]
  minutesCreated     MeetingMinute[]
  feedbacks          Feedback[]

  @@index([isActive])
  @@index([role])
  @@index([lastLogin])
  @@index([createdAt])
  @@index([emailVerified])
  @@index([isActive, role])
  @@index([isActive, lastLogin])
  @@index([isActive, createdAt])
}

model Club {
  id                   String   @id @default(uuid())
  name                 String
  motto                String?
  founded              String?
  headquarters         String?
  coverImage           String? // URL to cover image
  profileImage         String? // URL to profile image
  constitution         String? // URL to constitution document
  about                String?  @db.Text
  mission              String?  @db.Text
  values               String[] // Array of values
  avenues              String[] // Array of avenues
  email                String?
  phone                String?
  website              String?
  googleMapURL         String?
  instagram            String?
  facebook             String?
  linkedIn             String?
  twitter              String?
  interviewScheduleUrl String?
  isActive             Boolean  @default(true)
  isDeleted            Boolean  @default(false)
  createdById          String
  createdBy            User?    @relation("ClubCreator", fields: [createdById], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  members        ClubMember[]
  events         Event[]
  excomMembers   ExcomMember[]
  clubRequests   ClubRequest[]
  elections      Election[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?
  JoinRequest    JoinRequest[]
  meetingMinutes MeetingMinute[]
  feedbacks      Feedback[]
}

model ClubMember {
  id               String           @id @default(cuid())
  clubId           String
  club             Club             @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  role             MembershipRole   @default(member)
  membershipStatus MembershipStatus @default(pending)
  joinedAt         DateTime         @default(now())

  @@unique([clubId, userId])
  @@index([role])
  @@index([clubId])
  @@map("club_members")
}

model ExcomMember {
  id             String   @id @default(cuid())
  clubId         String
  club           Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  name           String
  position       String
  image          String?  @default("")
  about          String?  @db.Text
  memberSince    String? // Date when the member joined
  businessEmail  String?
  businessMobile String?
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("excom_members")
}

model Election {
  id          String        @id @default(uuid())
  clubId      String
  club        Club          @relation(fields: [clubId], references: [id])
  title       String
  subtitle    String?
  description String?
  year        Int
  votingStart DateTime
  votingEnd   DateTime
  positions   Position[]
  tokens      VotingToken[]
  createdAt   DateTime      @default(now())
}

model Position {
  id          String      @id @default(uuid())
  name        String
  description String?
  electionId  String
  election    Election    @relation(fields: [electionId], references: [id])
  candidates  Candidate[]
}

model Candidate {
  id         String   @id @default(uuid())
  name       String
  image      String   @default("")
  vision     String?
  experience String?
  positionId String
  position   Position @relation(fields: [positionId], references: [id])
}

model VotingToken {
  id         String   @id @default(uuid())
  electionId String
  election   Election @relation(fields: [electionId], references: [id])
  used       Boolean  @default(false)
  issuedTo   String // User ID (only during pre-voting)
  issuedAt   DateTime @default(now())
}

model Vote {
  id          String   @id @default(uuid())
  electionId  String
  positionId  String
  candidateId String
  createdAt   DateTime @default(now())
}

model Event {
  id              String        @id @default(cuid())
  title           String
  subtitle        String?
  clubId          String
  club            Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  category        EventCategory @default(other)
  description     String?       @db.Text
  startDateTime   DateTime
  endDateTime     DateTime?
  venue           String?
  maxParticipants Int?
  isDeleted       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  registrations   EventRegistration[]
  addons          EventAddon[]
  agenda          EventAgenda[]
  resourcePersons EventResourcePerson[]
  attendances     EventAttendance[]
  certificates    Certificate[]

  @@map("events")
}

model EventAddon {
  id           String   @id @default(cuid())
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  receivables  String[] // Array of receivables
  requirements String[] // Array of requirements
  tags         String[] // Array of tags
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("event_addons")
}

model EventAgenda {
  id                String   @id @default(cuid())
  eventId           String
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  startTime         DateTime
  endTime           DateTime
  agendaTitle       String
  agendaDescription String?  @db.Text
  createdAt         DateTime @default(now())

  @@map("event_agenda")
}

model EventResourcePerson {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name        String
  designation String?
  about       String?  @db.Text
  profileImg  String? // URL to profile image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("event_resource_persons")
}

model EventRegistration {
  id           String    @id @default(cuid())
  eventId      String
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteerId  String
  volunteer    User      @relation("EventRegistrations", fields: [volunteerId], references: [id])
  eventRole    EventRole @default(participant)
  isDeleted    Boolean   @default(false)
  registeredAt DateTime  @default(now())

  // Relations
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([eventId, volunteerId]) // Prevent duplicate registrations
  @@map("event_registrations")
}

model ClubRequest {
  id              String        @id @default(cuid())
  clubName        String
  motto           String?
  clubType        ClubType
  clubCategory    ClubCategory
  founded         DateTime?
  description     String        @db.Text
  mission         String?       @db.Text
  university      String? // Only if institute-based
  headquarters    String?
  requestedById   String
  requestedBy     User          @relation("ClubRequests", fields: [requestedById], references: [id])
  designation     String // Position of the person making request
  idProofDocument String? // URL to ID proof document
  constitutionDoc String? // URL to constitution document
  approvalLetter  String? // URL to approval letter
  clubLogo        String? // URL to club logo
  requestStatus   RequestStatus @default(pending)
  adminComments   String?       @db.Text // For admin feedback
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relation to approved club (if any)
  approvedClubId String? @unique
  approvedClub   Club?   @relation(fields: [approvedClubId], references: [id])
  User           User?   @relation(fields: [userId], references: [id])
  userId         String?

  @@map("club_requests")
}

model Inquiry {
  id            String       @id @default(cuid())
  inquirerName  String
  email         String
  subject       String
  type          InquiryType  @default(general)
  message       String       @db.Text
  role          InquirerRole @default(guest)
  isResolved    Boolean      @default(false)
  adminResponse String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("inquiries")
}

model EventAttendance {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String // was Int, now String
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    String // was Int, now String
  isAttend   Boolean   @default(false)
  attendTime DateTime?

  @@unique([userId, eventId])
}

model VolunteerStats {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  totalPoints        Int @default(0)
  eventsParticipated Int @default(0)
  eventsOrganized    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("volunteer_stats")
}

model JoinRequest {
  id             String            @id @default(cuid())
  clubId         String
  club           Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  motivation     String?           @db.Text
  relevantSkills String[]
  socialLinks    String[]
  status         JoinRequestStatus @default(pendingReview)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // A user can only have one active request per club
  @@unique([clubId, userId])
  @@map("join_requests")
}

model Certificate {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  certificateId String   @unique
  userName      String
  eventName     String
  clubName      String
  eventDate     String
  issuedAt      DateTime @default(now())
  createdAt     DateTime @default(now())

  @@unique([userId, eventId])
  @@map("certificates")
}

model MeetingMinute {
  id             String   @id @default(cuid())
  clubId         String
  club           Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  title          String
  content        String?  @db.Text
  meetingDate    DateTime
  attendeesCount Int?     @default(0)
  attendees      String[] @default([])
  attachments    String[] @default([])
  status         String   @default("draft") // e.g. draft, published, archived
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("meeting_minutes")
}

model Feedback {
  id        String   @id @default(cuid())
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())

  @@index([clubId])
  @@index([userId])
  @@map("feedbacks")
}
